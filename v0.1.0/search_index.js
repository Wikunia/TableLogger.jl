var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = TableLogger","category":"page"},{"location":"#TableLogger","page":"Home","title":"TableLogger","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for TableLogger.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [TableLogger]","category":"page"},{"location":"#TableLogger.DiffX","page":"Home","title":"TableLogger.DiffX","text":"DiffX{V,B}\n\nCan be used to specify the absolute difference which makes the given value different enough  from the previous value to print a new line. As an example if the last value is DiffX(5, 10) and the new value is DiffX(5, 12) the change is not significant enough. If the next value however is DiffX(5, 15) then the value is different enough from the last printed value 10. Therefore a new line is printed.\n\n\n\n\n\n","category":"type"},{"location":"#TableLogger.DiffX-Tuple{Any}","page":"Home","title":"TableLogger.DiffX","text":"DiffX(by)\n\nCreate an anonymous function with something like Diffd1 = DiffX(0.1) to be able to use Diffd1(10.0) instead of DiffX(0.1, 10.0).\n\n\n\n\n\n","category":"method"},{"location":"#TableLogger.Table","page":"Home","title":"TableLogger.Table","text":"mutable struct Table\n\nStores the TableSetup as well as the current and previous values\n\n\n\n\n\n","category":"type"},{"location":"#TableLogger.TableSetup","page":"Home","title":"TableLogger.TableSetup","text":"struct TableSetup\n\nStores information about the columns of the table by storing: ids, names, widths, alignments and precision\n\n\n\n\n\n","category":"type"},{"location":"#TableLogger.differs_enough-Tuple{Any, Any}","page":"Home","title":"TableLogger.differs_enough","text":"differs_enough(value, prev_value)\n\nReturn true if the value is significantly different from prev_value. In this default case simply return true if they are different.  Provide your own differs_enough function by dispatching on both values.\n\n\n\n\n\n","category":"method"},{"location":"#TableLogger.differs_enough-Tuple{DiffX, DiffX}","page":"Home","title":"TableLogger.differs_enough","text":"differs_enough(value::DiffX, prev_value::DiffX)\n\nCheck whether two DiffX values differ enough from each other.\n\n\n\n\n\n","category":"method"},{"location":"#TableLogger.fill_from_prev!-Tuple{TableLogger.Table}","page":"Home","title":"TableLogger.fill_from_prev!","text":"fill_from_prev!(table::Table)\n\nIf a value isn't given by a new called set_value! since the last call to print_line the previous value will be used. This function overwrites table.current_values to set unassigned values to table.prev_values.\n\n\n\n\n\n","category":"method"},{"location":"#TableLogger.format_table_value-Tuple{Int64, Real}","page":"Home","title":"TableLogger.format_table_value","text":"format_table_value(width::Int, value; default_precision=2)\n\nFormat the table value using the given width and value. \n\nFor val::Real\n\nreturn a string representation that fits in the width and return \"<<\" if val is smaller than 0 but can't be represented or \">>\" when it's bigger than 0.\n\nFor val::Integer\n\nreturn simply the string representation and t.l. if it doesn't fit\n\nFor all others:\n\nreturn simply the string representation and t.l. if it doesn't fit\n\n\n\n\n\n","category":"method"},{"location":"#TableLogger.get_column_id-Tuple{TableLogger.Table, Symbol}","page":"Home","title":"TableLogger.get_column_id","text":"get_column_id(table::Table, sym::Symbol)\n\nReturn the column id of the given symbol sym.  If the symbol doesn't exist throw an error.\n\n\n\n\n\n","category":"method"},{"location":"#TableLogger.get_header-Tuple{TableLogger.Table}","page":"Home","title":"TableLogger.get_header","text":"get_header(table::Table)\n\nReturn the header string of the Table including ====== as the second line\n\n\n\n\n\n","category":"method"},{"location":"#TableLogger.get_line-Tuple{TableLogger.Table}","page":"Home","title":"TableLogger.get_line","text":"get_line(table::Table)\n\nGet the next line of the table by using table.current_values. Call format_table_value to format each value and use the alignments to create the line such that it fits to get_header.\n\n\n\n\n\n","category":"method"},{"location":"#TableLogger.get_value-Tuple{DiffX}","page":"Home","title":"TableLogger.get_value","text":"get_value(d::DiffX)\n\nTaking the value of DiffX to represent it in the table.\n\n\n\n\n\n","category":"method"},{"location":"#TableLogger.init_log_table-Tuple{Vararg{NamedTuple}}","page":"Home","title":"TableLogger.init_log_table","text":"init_log_table(columns::NamedTuple...; width=20, alignment=:center, precision=2)\n\nInitialize the table structure by a list of information for each column.\n\nExample\n\ntable = init_log_table(\n    (id=:open_nodes, name=\"#Open\", width=30),\n    (id=:closed_nodes, name=\"#Closed\"),\n)\n\nWould create a table with two columns named #Open and #Closed and the width of #Open is 30. The default width of 20 is used for the closed nodes and both tables use the default alignment :center.\n\ntable = init_log_table(\n    (id=:open_nodes, name=\"#Open\", width=30),\n    (id=:closed_nodes, name=\"#Closed\");\n    alignment = :left\n)\n\nIn this case the default alignment is changed to :left.\n\n\n\n\n\n","category":"method"},{"location":"#TableLogger.init_log_table-Tuple{Vector{Symbol}, Vector{String}, Vector{Int64}, Vector{Symbol}, Vector{Int64}}","page":"Home","title":"TableLogger.init_log_table","text":"init_log_table(ids::Vector{Symbol}, names::Vector{String}, widths::Vector{Int}, alignments::Vector{Symbol}, precisions::Vector{Int})\n\nInitialize the table structure with a vector of ids, names, widths, alignments and precisions.\n\n\n\n\n\n","category":"method"},{"location":"#TableLogger.print_header-Tuple{TableLogger.Table}","page":"Home","title":"TableLogger.print_header","text":"print_header(table::Table)\n\nPrint the header of the given table. Calls get_header.\n\n\n\n\n\n","category":"method"},{"location":"#TableLogger.print_line-Tuple{TableLogger.Table}","page":"Home","title":"TableLogger.print_line","text":"print_line(table::Table; force=false)\n\nPrint the new line of the table if it differs enough from the previous line or if force = true. If the new line gets printed set the prev_values to current_values and the current_values to an nothing.\n\n\n\n\n\n","category":"method"},{"location":"#TableLogger.set_value!-Tuple{TableLogger.Table, Symbol, Any}","page":"Home","title":"TableLogger.set_value!","text":"set_value!(table::Table, column::Symbol, value)\n\nSet the current value of the given column to value\n\n\n\n\n\n","category":"method"},{"location":"#TableLogger.shall_print_line-Tuple{TableLogger.Table}","page":"Home","title":"TableLogger.shall_print_line","text":"shall_print_line(table::Table; force=false)\n\nReturn whether the new line shall be printed. If force = true return true immediately. Otherwise check if at least one value differs enough from the previous value by calling differs_enough.\n\n\n\n\n\n","category":"method"},{"location":"#TableLogger.update_for_new_row-Tuple{Any}","page":"Home","title":"TableLogger.update_for_new_row","text":"update_for_new_row(table)\n\nSet the previous values to current_values by using deepcopy and set all current_values to nothing.\n\n\n\n\n\n","category":"method"}]
}
